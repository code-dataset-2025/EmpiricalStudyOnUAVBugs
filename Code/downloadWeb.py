import requests
from bs4 import BeautifulSoup
import re
import os
from selenium import webdriver
from bs4 import BeautifulSoup
import time



def create_markdown_file(path, filename, content):
    # 检查路径是否存在，不存在则创建
    if not os.path.exists(path):
        os.makedirs(path)
    # 拼接完整文件路径
    file_path = os.path.join(path, filename + '.md')
    # 创建并写入文件
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(content)
    print(f"Markdown file created and saved at: {file_path}")


def get_clean_content(parent_tag,target_class,header_class):
    final_text = ""
    # 遍历父标签的所有子元素并提取文本
    for element in parent_tag.children:
        if element.name and ' '.join(element.get('class', [])) == target_class:
            # 处理 class 为 'Box Box--condensed my-2' 的 div

            box_text = ""

            # 查找Box-header f6的div并处理其文本
            for child in element.find_all('div', class_=header_class):
                box_text += f'/*{child.get_text(strip=True)}*/'

            # 获取该Box下除去Box-header f6部分的文本
            other_text = element.get_text(separator=' ', strip=True)
            other_text = re.sub(r'\s+', ' ', other_text)
            # 移除已处理的 Box-header f6 的文本，避免重复
            for child in element.find_all('div', class_=header_class):
                header_text = child.get_text(strip=False)
                header_text= re.sub(r'\s+', ' ', header_text)
                other_text= re.sub(r'\s+', ' ', other_text)
                other_text = other_text.replace(header_text[1:], '')
            # 将剩余文本添加到结果中
            box_text += other_text.strip()

            # 将完整的 Box 内容包裹在 ```
            final_text += f'\n```cpp \n {box_text}\n```'
        elif element.name == 'pre' and ' '.join(element.get('class', [])) == 'notranslate':
            box_text=get_clean_content(element,target_class,header_class)
            final_text += f'\n```bash \n {box_text}\n```'
        elif element.name == 'ol' or element.name == 'ul':
            # 处理 ol 或 ul 列表中的 li 元素
            for i, li in enumerate(element.find_all('li', recursive=False)):
                if element.name == 'ol':
                    # 对于 ol 列表，使用数字标号
                    list_counter = i + 1
                    if(element.get('start')!=None):
                        list_counter+=(int(element.get('start'))-1)
                    final_text += f'{list_counter}.'+get_clean_content(li,target_class,header_class)+'\n'
                elif element.name == 'ul':
                    # 对于 ul 列表，使用符号标号
                    final_text += f'- '+get_clean_content(li,target_class,header_class)+'\n'
        elif element.name=='li':
            break
        elif element.name is None:
            # 如果是纯文本节点，直接添加
            final_text += element
        else:
            # 处理除 'Box Box--condensed my-2' 外的其他元素
            final_text += get_clean_content(element,target_class,header_class)
    # 处理文本：将#替换为\#，将连续空格替换为一个空格
    final_text = re.sub(r'#', r'\#', final_text)  # 替换#为\#
    final_text = re.sub(r'\n+', '  \n', final_text)  # 替换多个连续换行为一个<br>
    return final_text

def get_md_of_url(url):

    #使用requests库获取HTML内容
    response = requests.get(url)
    response.raise_for_status()  # 如果请求失败，会抛出异常
    html_content = response.text
    # 使用BeautifulSoup解析HTML
    soup = BeautifulSoup(html_content, 'html.parser')
    result="# Basic Information:"
    # 查找title
    # 查找第一个class为指定值的h1标签
    class_name = 'Box-sc-g0xbh4-0 lhNOUb markdown-title'  # 替换为你想要的class值
    title_tag = soup.find('bdi', class_=class_name)
    if title_tag:
        result+="\n### Title: "+title_tag.text.replace('\n',' ')
    else:
        print('title ERROR')

    #查找issue status
    class_name='StateLabel__StateLabelBase-sc-qthdln-0'
    status_tag=soup.find('span',class_=class_name)
    fixed_by_tag=status_tag.find_next('a',class_='prc-Link-Link-85e08')
    if status_tag:
        result+="\n### Issue status: "+status_tag.text.replace('\n',' ').replace(' ','')
    else:
        print('status ERROR')

    # 查找author+issue open time+fixed by
    class_name='Box-sc-g0xbh4-0 dqmClk'
    author_tag= soup.find('div',class_=class_name)
    relative_time_tag=author_tag.find_next_sibling('div').find('relative-time')
    if author_tag:
        result+="\n### Author: "+author_tag.text.replace('\n',' ')
    else:
        print('Author ERROR')
    if relative_time_tag:
        result+='\n### Issue open time: '+relative_time_tag.text.replace('\n',' ')[3:]
    else:
        print('open time ERROR')
    if fixed_by_tag:
        result+='\n### Fixed by: '+fixed_by_tag.text.replace('\n',' ')
    # 查找report部分所有内容
    result+="\n# Report"
    whole_block_tag=soup.find('div',class_='js-discussion ml-0 pl-0 ml-md-6 pl-md-3')
    report_tag=soup.find('div',class_='IssueBodyViewer-module__IssueBody--MXyFt')

    report_content_tag=report_tag.find('div',class_='Box-sc-g0xbh4-0 markdown-body NewMarkdownViewer-module__safe-html-box--cRsz0')
    if author_tag:
        result+="\n### Report author: "+author_tag.text.replace('\n',' ')
    else:
        print('Report author ERROR')
    if relative_time_tag:
        result+="\n### Report Time: "+relative_time_tag.text.replace('\n',' ')[3:]
    else:
        print('Report Time ERROR')
    if report_content_tag:
        result+="\n### Report Content: "+get_clean_content(report_content_tag,'Box Box--condensed my-2','Box-header f6')
    else:
        print('Report Content ERROR')

    # print(result)
    #查找comment部分所有内容
    result+="\n# Comment"
    comment_list=whole_block_tag.find_all('div',class_='Box-sc-g0xbh4-0 markdown-body NewMarkdownViewer-module__safe-html-box--cRsz0')
    for i in range(1,len(comment_list)):
        result += "\n## Comment" + str(i)
        comment_author_tag=comment_list[i].find('a',class_='author Link--primary text-bold css-overflow-wrap-anywhere')
        comment_time_tag=comment_author_tag.parent.parent.find('relative-time')
        comment_content_tag=comment_list[i].find('td',class_='d-block comment-body markdown-body js-comment-body')
        if comment_author_tag:
            result += "\n### Comment author: " + comment_author_tag.text.replace('\n', ' ')
        else:
            print('Comment author'+str(i)+'ERROR')
        if comment_time_tag:
            result += "\n### Comment Time: " + comment_time_tag.text.replace('\n', ' ')
        else:
            print('Comment time'+str(i)+'ERROR')
        if comment_content_tag:
            result+="\n### Comment Content: "+get_clean_content(comment_content_tag,'Box Box--condensed my-2','Box-header f6')
        else:
            print('Comment content'+str(i)+'ERROR')

    return result

startnum=0
path='./new/markdown'
urls=['24083', '24073', '24060', '24059', '24023', '23988', '23975', '23970', '23954', '23903', '23857', '23842', '23811', '23786', '23773', '23761', '23736', '23734', '23727', '23720', '23716', '23714', '23683', '23636', '23615', '23612', '23598', '23589', '23548', '23533', '23530', '23528', '23487', '23481', '23454', '23442', '23439', '23434', '23378', '23361', '23349', '23340', '23329', '23308', '23301', '23289', '23275', '23259', '23258', '23254', '23251', '23246', '23237', '23224', '23200', '23179', '23171', '23159', '23157', '23139', '23114', '23074', '23051', '23040', '23034', '23026', '23013', '22998', '22994', '22986', '22948', '22937', '22867', '22858', '22857', '22839', '22819', '22807', '22797', '22767', '22730', '22728', '22714', '22695', '22687', '22683', '22664', '22659', '22655', '22654', '22650', '22634', '22633', '22606', '22599', '22587', '22573', '22569', '22565', '22561', '22558', '22542', '22540', '22523', '22522', '22520', '22515', '22492', '22485', '22482', '22474', '22452', '22430', '22429', '22428', '22422', '22415', '22399', '22385', '22382', '22358', '22357', '22356', '22355', '22318', '22306', '22300', '22285', '22283', '22275', '22272', '22264', '22245', '22236', '22221', '22220', '22219', '22214', '22206', '22196', '22180', '22163', '22162', '22160', '22159', '22144', '22139', '22130', '22122', '22119', '22118', '22110', '22104', '22093', '22072', '22070', '22069', '22068', '22067', '22052', '22050', '22046', '22042', '22041', '22037', '22024', '22016', '22006', '22004', '22002', '22001', '21983', '21982', '21978', '21966', '21965', '21964', '21953', '21952', '21934', '21929', '21927', '21924', '21914', '21911', '21895', '21893', '21882', '21880', '21838', '21836', '21828', '21811', '21805', '21774', '21771', '21770', '21748', '21732', '21730', '21727', '21702', '21687', '21686', '21674', '21672', '21654', '21650', '21648', '21644', '21634', '21627', '21625', '21607', '21601', '21600', '21588', '21575', '21567', '21552', '21544', '21519', '21518', '21496', '21494', '21481', '21471', '21441', '21430', '21421', '21401', '21397', '21393', '21387', '21370', '21327', '21318', '21302', '21278', '21257', '21247', '21242', '21228', '21206', '21199', '21185', '21184', '21167', '21149', '21144', '21108', '21102', '21092', '21090', '21087', '21072', '21062', '21043', '20944', '20932', '20929', '20923', '20918', '20900', '20881', '20834', '20826', '20820', '20793', '20783', '20775', '20765', '20762', '20747', '20743', '20731', '20708', '20696', '20694', '20693', '20687', '20677', '20668', '20634', '20629', '20609', '20555', '20524', '20519', '20507', '20503', '20477', '20465', '20454', '20445', '20436', '20415', '20410', '20395', '20376', '20374', '20345', '20334', '20311', '20295', '20280', '20279', '20277', '20276', '20275', '20260', '20258', '20246', '20235', '20211', '20205', '20197', '20187', '20159', '20158', '20134', '20130', '20126', '20120', '20118', '20091', '20088', '20087', '20042', '19998', '19992', '19969', '19961', '19943', '19917', '19901', '19890', '19887', '19863', '19859', '19853', '19852', '19846', '19834', '19831', '19810', '19809', '19797', '19788', '19772', '19770', '19768', '19760', '19756', '19733', '19732', '19731', '19722', '19667', '19665', '19642', '19382', '19361', '19348', '19233', '19215', '19155', '19150', '19134', '19046', '19045', '19009', '18750', '18675', '18672', '18597', '18595', '18576', '18574', '18573', '18562', '18516', '18429', '18385', '18375', '18354', '18306', '18271', '18223', '18110', '18095', '18082', '18060', '18055', '18041', '18014', '17977', '17911', '17908', '17831', '17804', '17769', '17746', '17685', '17615', '17578', '17509', '17491', '17489', '17442', '17417', '17380', '17323', '17305', '17259', '17244', '17237', '17220', '17192', '17097', '17016', '17006', '16932', '16918', '16873', '16843', '16823', '16813', '16763', '16715', '16672', '16670', '16643', '16639', '16630', '16621', '16601', '16586', '16541', '16530', '16526', '16511', '16445', '16390', '16372', '16363', '16358', '16305', '16299', '16278', '16235', '16230', '16194', '16129', '16122', '16113', '16083', '16070', '16057', '16029', '16001', '15984', '15944', '15940', '15922', '15894', '15879', '15872', '15839', '15826', '15810', '15801', '15795', '15786', '15771', '15744', '15711', '15686', '15667', '15652', '15628', '15612', '15595', '15558', '15544', '15527', '15505', '15501', '15471', '15466', '15450', '15417', '15410', '15409', '15408', '15402', '15400', '15398', '15347', '15336', '15284', '15275', '15242', '15225', '15211', '15201', '15188', '15153', '15146', '15088', '15073', '15069', '15065', '15054', '15043', '15042', '15037', '15003', '14994', '14947', '14927', '14926', '14909', '14908', '14904', '14903', '14888', '14857', '14856', '14854', '14851', '14849', '14840', '14838', '14831', '14829', '14824', '14802', '14795', '14783', '14777', '14760', '14745', '14744', '14743', '14740', '14736', '14735', '14733', '14730', '14720', '14719', '14718', '14717', '14704', '14677', '14671', '14670', '14662', '14661', '14659', '14655', '14649', '14644', '14640', '14632', '14612', '14600', '14588', '14579', '14566', '14558', '14547', '14542', '14527', '14526', '14522', '14521', '14513', '14509', '14503', '14500', '14479', '14456', '14442', '14440', '14439', '14436', '14422', '14361', '14354', '14349', '14325', '14324', '14321', '14303', '14300', '14281', '14274', '14273', '14260', '14251', '14243', '14232', '14230', '14223', '14206', '14204', '14200', '14189', '14165', '14161', '14157', '14150', '14146', '14133', '14116', '14101', '14075', '14068', '14011', '13962', '13956', '13953', '13952', '13950', '13946', '13935', '13892', '13884', '13868', '13856', '13826', '13799', '13793', '13788', '13754', '13752', '13751', '13732', '13731', '13724', '13717', '13697', '13688', '13685', '13682', '13675', '13667', '13654', '13634', '13592', '13546', '13533', '13518', '13508', '13507', '13483', '13479', '13471', '13467', '13466', '13462', '13458', '13455', '13415', '13413', '13410', '13388', '13378', '13377', '13374', '13352', '13334', '13329', '13313', '13309', '13292', '13291', '13282', '13280', '13252', '13244', '13231', '13192', '13182', '13180', '13148', '13147', '13144', '13133', '13124', '13123', '13120', '13116', '13098', '13087', '13083', '13068', '13055', '13030', '13022', '13012', '13010', '13001', '12992', '12990', '12987', '12980', '12958', '12955', '12932', '12925', '12919', '12911', '12910', '12900', '12879', '12877', '12855', '12833', '12814', '12813', '12791', '12789', '12774', '12773', '12768', '12761', '12758', '12753', '12734', '12716', '12692', '12685', '12637', '12626', '12592', '12579', '12565', '12553', '12548', '12536', '12517', '12504', '12490', '12485', '12484', '12476', '12475', '12471', '12460', '12457', '12432', '12412', '12407', '12375', '12359', '12338', '12307', '12272', '12265', '12264', '12258', '12255', '12251', '12247', '12241', '12240', '12221', '12216', '12203', '12201', '12193', '12190', '12189', '12171', '12164', '12158', '12155', '12134', '12124', '12092', '12086', '12071', '12029', '12006', '12004', '11971', '11959', '11945', '11942', '11929', '11916', '11912', '11907', '11901', '11899', '11885', '11880', '11875', '11868', '11860', '11854', '11847', '11844', '11832', '11830', '11824', '11812', '11799', '11798', '11794', '11789', '11778', '11774', '11767', '11764', '11759', '11757', '11751', '11750', '11739', '11737', '11734', '11720', '11716', '11704', '11703', '11702', '11695', '11685', '11683', '11662', '11646', '11640', '11625', '11604', '11600', '11588', '11569', '11551', '11492', '11452', '11433', '11420', '11408', '11402', '11386', '11384', '11380', '11364', '11317', '11289', '11282', '11275', '11266', '11257', '11238', '11235', '11226', '11220', '11213', '11203', '11198', '11197', '11179', '11165', '11162', '11152', '11150', '11144', '11125', '11118', '11116', '11110', '11076', '11072', '11071', '11054', '11049', '11045', '11041', '11036', '11028', '11026', '11019', '11017', '11006', '11003', '10999', '10997', '10981', '10980', '10972', '10961', '10925', '10896', '10881', '10843', '10839', '10833', '10818', '10790', '10775', '10767', '10757', '10735', '10712', '10693', '10686', '10679', '10678', '10677', '10659', '10655', '10644', '10639', '10627', '10625', '10620', '10599', '10593', '10590', '10571', '10539', '10495', '10489', '10471', '10458', '10457', '10443', '10440', '10429', '10415', '10412', '10406', '10391', '10381', '10376', '10375', '10370', '10360', '10359', '10358', '10352', '10351', '10345', '10315', '10309', '10296', '10282', '10262', '10258', '10233', '10230', '10228', '10223', '10221', '10220', '10203', '10185', '10176', '10131', '10106', '10104', '10102', '10101', '10099', '10092', '10057', '10040', '10036', '10034', '10033', '10032', '10028', '10026', '10023', '9992', '9989', '9984', '9977', '9973', '9971', '9965', '9939', '9927', '9920', '9915', '9904', '9901', '9871', '9867', '9866', '9841', '9799', '9796', '9768', '9764', '9755', '9746', '9740', '9738', '9726', '9720', '9716', '9713', '9696', '9667', '9666', '9639', '9637', '9616', '9602', '9582', '9575', '9554', '9540', '9539', '9537', '9532', '9527', '9513', '9505', '9495', '9474', '9472', '9452', '9447', '9444', '9414', '9369', '9348', '9300', '9200', '9155', '9151', '9150', '9137', '9134', '9108', '9066', '9052', '9043', '9038', '9037', '9033', '9032', '9025', '9022', '9020', '9009', '8998', '8997', '8992', '8988', '8984', '8980', '8945', '8930', '8927', '8913', '8903', '8877', '8867', '8864', '8863', '8858', '8852', '8850', '8834', '8828', '8822', '8816', '8815', '8809', '8808', '8807', '8805', '8803', '8792', '8783', '8782', '8773', '8766', '8763', '8761', '8760', '8757', '8756', '8753', '8751', '8748', '8747', '8746', '8744', '8742', '8732', '8730', '8727', '8724', '8722', '8720', '8718', '8717', '8715', '8713', '8712', '8707', '8696', '8692', '8690', '8674', '8672', '8657', '8655', '8644', '8643', '8632', '8628', '8621', '8603', '8601', '8600', '8585', '8567', '8563', '8556', '8541', '8540', '8529', '8523', '8522', '8518', '8515', '8508', '8477', '8468', '8465', '8464', '8460', '8459', '8458', '8455', '8454', '8413', '8408', '8403', '8401', '8400', '8398', '8392', '8389', '8380', '8376', '8367', '8362', '8361', '8333', '8318', '8312', '8305', '8303', '8299', '8297', '8289', '8280', '8275', '8263', '8262', '8257', '8256', '8255', '8253', '8252', '8246', '8245', '8239', '8221', '8213', '8198', '8197', '8186', '8184', '8176', '8163', '8159', '8158', '8150', '8148', '8131', '8124', '8122', '8105', '8102', '8100', '8093', '8087', '8070', '8069', '8066', '8053', '8034', '7998', '7978', '7971', '7968', '7947', '7925', '7911', '7910', '7872', '7861', '7860', '7858', '7820', '7818', '7794', '7768', '7755', '7750', '7746', '7737', '7727', '7696', '7677', '7672', '7656', '7638', '7612', '7609', '7603', '7599', '7597', '7551', '7545', '7544', '7541', '7535', '7513', '7512', '7511', '7510', '7495', '7490', '7475', '7467', '7463', '7457', '7439', '7426', '7409', '7408', '7405', '7402', '7394', '7391', '7390', '7385', '7364', '7362', '7333', '7327', '7325', '7311', '7309', '7288', '7261', '7234', '7202', '7198', '7194', '7192', '7191', '7185', '7173', '7150', '7133', '7123', '7097', '7089', '7085', '7083', '7068', '7066', '7063', '7059', '7054', '7053', '7051', '7050', '7048', '7033', '7023', '7021', '7020', '7018', '7010', '6994', '6984', '6982', '6961', '6957', '6947', '6941', '6921', '6914', '6913', '6911', '6905', '6902', '6900', '6898', '6876', '6873', '6872', '6867', '6864', '6855', '6843', '6838', '6827', '6820', '6818', '6807', '6800', '6799', '6798', '6797', '6796', '6794', '6783', '6772', '6762', '6758', '6733', '6726', '6722', '6715', '6712', '6711', '6702', '6669', '6660', '6651', '6630', '6623', '6622', '6620', '6617', '6604', '6602', '6576', '6554', '6549', '6546', '6545', '6541', '6533', '6501', '6499', '6498', '6488', '6479', '6456', '6445', '6444', '6423', '6390', '6389', '6388', '6366', '6359', '6332', '6314', '6288', '6282', '6281', '6274', '6263', '6261', '6260', '6249', '6235', '6233', '6228', '6211', '6207', '6204', '6184', '6175', '6172', '6165', '6152', '6107', '6094', '6092', '6070', '6037', '5986', '5982', '5975', '5970', '5963', '5959', '5934', '5929', '5924', '5887', '5881', '5855', '5811', '5802', '5801', '5771', '5757', '5756', '5752', '5739', '5728', '5726', '5725', '5717', '5702', '5691', '5680', '5676', '5675', '5673', '5639', '5632', '5631', '5629', '5624', '5623', '5609', '5596', '5553', '5543', '5535', '5527', '5519', '5514', '5511', '5501', '5496', '5465', '5462', '5446', '5395', '5382', '5334', '5317', '5305', '5290', '5282', '5276', '5243', '5238', '5229', '5218', '5211', '5210', '5172', '5171', '5170', '5149', '5146', '5135', '5134', '5118', '5115', '5112', '5110', '5103', '5083', '5078', '5060', '5059', '5038', '4984', '4982', '4980', '4962', '4954', '4937', '4929', '4924', '4908', '4904', '4850', '4847', '4838', '4837', '4836', '4828', '4819', '4800', '4799', '4791', '4784', '4782', '4769', '4767', '4766', '4757', '4747', '4745', '4723', '4722', '4721', '4700', '4692', '4685', '4682', '4674', '4656', '4654', '4652', '4646', '4639', '4636', '4635', '4614', '4600', '4587', '4550', '4549', '4536', '4534', '4530', '4516', '4487', '4486', '4468', '4466', '4462', '4443', '4424', '4421', '4379', '4371', '4356', '4316', '4300', '4295', '4232', '4224', '4203', '4198', '4193', '4185', '4169', '4151', '4149', '4145', '4144', '4141', '4135', '4125', '4115', '4113', '4111', '4110', '4108', '4080', '4054', '3965', '3950', '3940', '3939', '3938', '3936', '3933', '3874', '3873', '3844', '3795', '3794', '3775', '3770', '3759', '3739', '3735', '3688', '3659', '3656', '3655', '3629', '3628', '3620', '3600', '3591', '3536', '3535', '3490', '3450', '3447', '3440', '3412', '3411', '3387', '3374', '3359', '3333', '3332', '3324', '3286', '3283', '3265', '3264', '3255', '3251', '3228', '3212', '3180', '3163', '3162', '3160', '3159', '3146', '3132', '3122', '3117', '3108', '3082', '3046', '2998', '2977', '2975', '2971', '2966', '2951', '2942', '2915', '2912', '2898', '2893', '2810', '2768', '2727', '2725', '2694', '2663', '2637', '2608', '2551', '2408', '2407', '2393', '2384', '2381', '2319', '2229', '2122', '2113', '2107', '2093', '2036', '2030', '1981', '1951', '1947', '1921', '1915', '1856', '1792', '1750', '1723', '1706', '1700', '1683', '1682', '1675', '1619', '1603', '1442', '1441', '1440', '1382', '1328', '1311', '1307', '1306', '1235', '1218', '1209', '1207', '1201', '1190', '1176', '1141', '1134', '1124', '1105', '1098', '1097', '1067', '1064', '1056', '1055', '1045', '1012', '996', '930', '910', '872', '859', '805', '789', '784', '779', '773', '756', '723', '722', '702', '687', '665', '663', '662', '650', '649', '632', '623', '599', '583', '561', '554', '500', '487', '435', '413', '400', '386', '378', '184', '164', '163', '117', '103', '25', '24', '23', '22', '19', '13', '8', '1']
merged_result=[21686, 21674, 21672, 21654, 21650, 21634, 21625, 21607, 21601, 21600, 21588, 21575, 21544, 21518, 21496, 21494, 21481, 21471, 21441, 21430, 21401, 21393, 21370, 21327, 21278, 21242, 21184, 21167, 21102, 21072, 21062, 21043, 20900, 20881, 20834, 20826, 20820, 20793, 20783, 20765, 20762, 20743, 20731, 20708, 20693, 20677, 20668, 20634, 20609, 20555, 20519, 20503, 20477, 20465, 20410, 20395, 20374, 20345, 20334, 20311, 20260, 20211, 20159, 20158, 20134, 20130, 20126, 20091, 19998, 19969, 19917, 19901, 19890, 19859, 19853, 19852, 19831, 19797, 19788, 19770, 19760, 19756, 19667, 19665, 19348, 19233, 19155, 19134, 18750, 18595, 18576, 18574, 18573, 18385, 18306, 18271, 18082, 18060, 18014, 17911, 17831, 17769, 17746, 17442, 17417, 17380, 17323, 17244, 17237, 17220, 17192, 17006, 16843, 16813, 16715, 16670, 16601, 16586, 16445, 16390, 16305, 16299, 16278, 16235, 16230, 16129, 16122, 16113, 16057, 15922, 15826, 15667, 15628, 15612, 15595, 15527, 15501, 15466, 15417, 15410, 15409, 15408, 15347, 15211, 15069, 15065, 15042, 15037, 14947, 14909, 14904, 14903, 14888, 14840, 14838, 14824, 14802, 14736, 14730, 14718, 14717, 14671, 14670, 14659, 14649, 14612, 14600, 14588, 14579, 14566, 14527, 14479, 14456, 14442, 14440, 14439, 14354, 14303, 14300, 14281, 14274, 14260, 14251, 14243, 14232, 14223, 14206, 14200, 14189, 14161, 14157, 14150, 14133, 14101, 14075, 14011, 13962, 13956, 13952, 13946, 13892, 13856, 13793, 13754, 13752, 13751, 13732, 13731, 13724, 13688, 13682, 13675, 13654, 13533, 13508, 13471, 13467, 13455, 13415, 13377, 13374, 13329, 13313, 13309, 13292, 13280, 13244, 13231, 13180, 13148, 13147, 13116, 13087, 13055, 13030, 13012, 13010, 13001, 12980, 12955, 12932, 12919, 12900, 12879, 12855, 12833, 12813, 12761, 12758, 12692, 12637, 12626, 12517, 12471, 12338, 12307, 12251, 12241, 12240, 12221, 12201, 12193, 12190, 12171, 12071, 12029, 12006, 11945, 11942, 11929, 11901, 11899, 11880, 11875, 11860, 11847, 11832, 11794, 11778, 11751, 11750, 11716, 11685, 11646, 11551, 11492, 11452, 11433, 11408, 11386, 11364, 11282, 11238, 11226, 11220, 11198, 11118, 11110, 11006, 10999, 10972, 10775, 10767, 10693, 10686, 10678, 10655, 10627, 10593, 10571, 10489, 10471, 10457, 10412, 10296, 10099, 10092, 9867, 9841, 9768, 9716, 9554, 9513, 9200, 9025, 8828, 8303, 8255, 7755, 7746, 7457, 7051, 6783, 6669, 6282, 6184, 6172, 5887, 5465, 5317, 3795, 3117, 500]
for i in range(startnum,len(urls)):
    if int(urls[i]) in merged_result:
        continue
    text=get_md_of_url("https://github.com/PX4/PX4-Autopilot/issues/"+urls[i])
    if text=='':
        print('ERROR in issue '+str(urls[i]))
    else:
        create_markdown_file(path,"issue"+str(urls[i]),text)
    print("Now No."+str(i)+" is done!")